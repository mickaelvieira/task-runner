#!/bin/bash

#############################################################################
#                              Tasks Runner                                 #
#############################################################################

set -e -u -o pipefail

declare -r VERSION="0.0.1"

declare -r SCRIPT=$(basename $0)
declare -r BASE_DIR="$(dirname "$(readlink -f ${0})")"
declare -r LIB_DIR="${BASE_DIR}/lib"
declare -r TASKS_DIR="${LIB_DIR}/tasks"

declare -r WORKING_DIR="$(pwd -P)"
declare -r NPM_DIR="${WORKING_DIR}/node_modules/.bin"
declare -r RC_FILE="${WORKING_DIR}/.trunrc"

declare -r DEFAULT_DIST_DIR="dist"
declare -r DEFAULT_SRC_DIR=""

declare -ra TASKS=(
    clean
    unwatch
    watch
    watch_js
    watch_css
    watch_tests
    run_tests
    build
    build_js
    build_css
)

source "${LIB_DIR}/utils/logger.sh"
source "${LIB_DIR}/utils/tmux.sh"

read_help() {
    cat <<eom
Usage: ${SCRIPT} [options] -e <task> -s <source directory> -t <target directory>
Version: ${VERSION}
Options:
  -h: This help
  -d: Debug mode
  -e: Executed task name
  -s: Source directory where to find the assets, default '${DEFAULT_SRC_DIR}'
  -t: Target directory where to build the assets, default '${DEFAULT_DIST_DIR}'
Tasks: ${TASKS[@]}
eom
}

show_usage() {
    echo -e "$(read_help)" 1>&2
    exit 1
}

# Check whether all dependencies are executable
check_dependencies() {
    local deps=(
        sass
        tmux
        browserify
        exorcist
        watchify
        uglifyjs
        uglifycss
        karma
        mocha
        phantomjs
    )

    for dep in ${deps[@]}; do
        command -v $dep > /dev/null 2>&1 || \
            error "'${dep}' is required but it is not installed."
    done
}

# Include the local node binaries if there are found
add_npm_bin_to_path() {
    [[ -d $NPM_DIR ]] && \
        export PATH="${NPM_DIR}:$PATH"
    return 0
}

# Include the local configuration
include_conf() {
    [[ ! -f $RC_FILE ]] && \
        error "Configuration file '${RC_FILE}' is missing!"

    source $RC_FILE
}

include_lib() {
    local task=$1
    local lib_path=

    if [[ $task == "build" || $task == "watch" ]]; then
        lib_path="${LIB_DIR}/${task}.sh"
    else
        lib_path="${TASKS_DIR}/${task}.sh"
    fi

    [[ ! -f $lib_path ]] && \
        error "'${lib_path}' script is missing in '${TASKS_DIR}'!"

    source $lib_path
}

make_target_directories() {
    [[ ! -d "${DIST_DIR}/js" ]] && \
        mkdir -p "${DIST_DIR}/js"
    [[ ! -d "${DIST_DIR}/css" ]] && \
        mkdir -p "${DIST_DIR}/css"
    return 0
}

check_source_directories() {
    [[ ! -d "${SRC_DIR}/js" ]] && \
        error "Javascript source directory not found in ${SRC_DIR}/js"
    [[ ! -d "${SRC_DIR}/scss" ]] && \
        error "SASS source directory not found in ${SRC_DIR}/scss"
    return 0
}

# Check whether the task is valid
# It returns the task name if it was found
# otherwise it returns an empty value
check_task() {
    local needle="${1:-}"
    local found=

    for task in "${TASKS[@]}"; do
        if [[ $task  == $needle ]]; then
            found=$task
            break
        fi
    done

    echo ${found}
}

main() {
    local task=
    local src_dir=
    local dist_dir=

    while getopts "dhe:s:t:" opt; do
        case $opt in
            d) set -x;;
            h) show_usage;;
            s) src_dir=$OPTARG;;
            t) dist_dir=$OPTARG;;
            e) task=$OPTARG;;
            *) show_usage;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z $task ]] && show_usage
    [[ -z $(check_task $task) ]] && error "'${task}' is not a valid task!"
    [[ -z $src_dir ]] && src_dir=$DEFAULT_SRC_DIR
    [[ -z $dist_dir ]] && dist_dir=$DEFAULT_DIST_DIR

    readonly SRC_DIR="${WORKING_DIR}/${src_dir%\/}"
    readonly DIST_DIR="${WORKING_DIR}/${dist_dir%\/}"

    info "${SCRIPT}@${VERSION} ${WORKING_DIR}"

    add_npm_bin_to_path
    check_dependencies
    include_conf
    make_target_directories
    check_source_directories

    include_lib $task
}

main "$@"

