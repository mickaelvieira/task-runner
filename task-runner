#!/bin/bash

#############################################################################
#                              Tasks Runner                                 #
#############################################################################

set -o nounset
set -o errexit
set -o pipefail
#set -x

declare -r VERSION="0.0.1"

declare -r SCRIPT=$(basename $0)
declare -r BASE_DIR="$(dirname $(readlink ${0}))"
declare -r LIB_DIR="${BASE_DIR}/lib"
declare -r TASKS_DIR="${LIB_DIR}/tasks"

declare -r WORKING_DIR="$(pwd -P)"
declare -r NPM_DIR="${WORKING_DIR}/node_modules/.bin"
declare -r RC_FILE="${WORKING_DIR}/.trunrc"

declare -r DEFAULT_DIST_DIR="${WORKING_DIR}/dist"
declare -r DEFAULT_SRC_DIR="${WORKING_DIR}/html"

declare -r CUR_TASK="${1:-}"

declare -ra TASKS=(
    clean
    unwatch
    watch
    watch_js
    watch_css
    watch_test
    test
    build
    build_js
    build_css
)

source "${LIB_DIR}/utils/logger.sh"
source "${LIB_DIR}/tmux.sh"

usage() {
    help+="Usage:\n"
    help+="\t${SCRIPT} [--help] <task>\n"
    help+="Options:\n"
    help+="\t-h Display this help\n"
    help+="Tasks available: \n"
    help+=" \t${TASKS[@]}\n"
    echo -e ${help} 1>&2
    exit 1
}

# Check whether all dependencies are executable
check_dependencies() {

    local deps=(
        tmux
        browserify
        exorcist
        watchify
        uglifyjs
        karma
        mocha
        phantomjs
    )

    for dep in ${deps[@]}; do
        command -v $dep > /dev/null 2>&1 || \
            error "'${dep}' is required but it is not installed."
    done
}

# Include the local node binaries if there are found
add_npm_bin_to_path() {

    [[ -d $NPM_DIR ]] && \
        export PATH="${NPM_DIR}:$PATH"
}

include_lib() {

    for task in ${TASKS[*]}; do
        local file="${TASKS_DIR}/${task}.sh"

        [[ ! -f $file ]] && \
            error "'${item}' script is missing in '${TASKS_DIR}'!"

        source $file
    done
}

# Include the local configuration
include_conf() {

    [[ ! -f $RC_FILE ]] && \
        error "Configuration file '${RC_FILE}' is missing!"

    source $RC_FILE

    readonly SRC_DIR=$DEFAULT_SRC_DIR
    readonly DIST_DIR=$DEFAULT_DIST_DIR

    if [[ ! -d $DIST_DIR ]]; then
        mkdir -p "${DIST_DIR}/js"
        mkdir -p "${DIST_DIR}/css"
    fi

    info "Source: ${SRC_DIR}"
    info "Distribution: ${DIST_DIR}"
}

# Check whether the task is valid
# It returns the task name if it was found
# otherwise it returns an empty value
is_valid_task() {

    local needle="${1}"
    local found=""

    for task in "${TASKS[@]}"; do
        if [[ $task  == $needle ]]; then
            found=$task
            break
        fi
    done

    echo ${found}
}

main() {

    # Display the command help screen
    [[ $CUR_TASK == "--help" || $CUR_TASK == "-h" ]] && usage

    # Make sure this is valid task
    [[ -z $(is_valid_task $CUR_TASK) ]] && error "'${CUR_TASK}' is not a valid task!"

    # Let's get started
    info "${SCRIPT}@${VERSION} ${WORKING_DIR}"

    add_npm_bin_to_path
    check_dependencies
    include_conf

    if [[ $CUR_TASK == "build" || $CUR_TASK == "watch" ]]; then
        local lib_script="${LIB_DIR}/${CUR_TASK}.sh"
    else
        local lib_script="${TASKS_DIR}/${CUR_TASK}.sh"
    fi

    [[ ! -f $lib_script ]] && \
        error "'${lib_script}' script is missing in '${TASKS_DIR}'!"

    info "Starting ${CUR_TASK}"

    source $lib_script
}

main

exit 0

